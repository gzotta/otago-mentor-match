plugins {
    id 'java'
    id 'application'
    id 'jacoco'
    id 'java-library'
}
 
repositories {
   jcenter()
}
 
dependencies {
    
    //Jooby dependency
    /*Jooby does not provide its own web server so needs to be run on top of 
     *another server. In this case we are using Netty as the server. 
     *Netty provides a high-performance Java-based web server.
     */
    implementation group: 'org.jooby', name: 'jooby-netty', version: '1.6.9'
    //The Gson dependency allows Jooby to convert domain objects to and from JSON.
    implementation group: 'org.jooby', name: 'jooby-gson', version: '1.6.9'
    
    //JUnit dependecy for testing.
    def junitVer = '5.7.+'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVer
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVer
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    
    
    //Guava dependecy for creating multimaps.
    implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    
    
    // Get MariaDB Java Driver.
     implementation 'org.mariadb.jdbc:mariadb-java-client:2.6.0'
   
    
    
    //Validation framework for  java objects.
    implementation group: 'net.sf.oval', name: 'oval', version: '2.1.6'
    
    
    //Library for mocking DAO
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.+'
    
    
    //Sending email dependency
    implementation group: 'org.apache.commons', name: 'commons-email', version: '1.5'
    
    
    //Helper for hashing passwords with Scrypt
    implementation group:'org.bouncycastle', name:'bcprov-jdk15on', version:'1.66'
    
    
    
}
 
test {
    useJUnitPlatform()
}
 
run {
    standardInput = System.in
}
 

mainClassName = 'web.Server'

 
 // A couple of Gradle tasks that allows you to create missing source folders and remove unused source folders as needed.
 
task createMissingSourceDirs {
    group = "Source Directories"
    description = "Create all of the missing source directories for this project."
    doFirst {
        sourceSets.each { def sourceRoot ->
            sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
                if(!sourceDir.dir.exists()) {
                    println "Creating ${sourceDir}"
                    mkdir sourceDir.dir
                }
            }
        }
    }
}
 
task deleteEmptySourceDirs {
    group = "Source Directories"
    description = "Delete all empty source directories."
    doFirst {
        sourceSets.each { def sourceRoot ->
            sourceRoot.allSource.srcDirTrees.each { def sourceDir ->
                if(sourceDir.dir.exists() && sourceDir.dir.isDirectory() && sourceDir.dir.list().length == 0) {
                    println "Removing empty ${sourceDir}"
                    sourceDir.dir.delete()
                }
            }
        }
    }
}
 
/*
Jooby looks for its assets in a resource folder with the name public so 
we need to add this to our project.
 */
sourceSets {
    web {
        resources {
            srcDirs = ['public']
        }
        java {
            srcDirs = []
        }
    }
}
 
 
//This is to package the release of the application
compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}